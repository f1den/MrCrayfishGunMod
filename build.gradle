plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
}

archivesBaseName = "cgm"
version = "1.3.7-1.19.2"
group = "com.mrcrayfish"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "cgm.refmap.json"
    config 'cgm.mixins.json'
}

minecraft {
    mappings channel: 'official', version: '1.19.2'

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                cgm {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg '-mixin.config=cgm.mixins.json'
            mods {
                cgm {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'cgm', '--all', '--output', file('src/generated/resources/')
            arg '-mixin.config=cgm.mixins.json'
            mods {
                cgm {
                    source sourceSets.main
                }
            }
        }
    }
}

//processResources {
//    doLast {
//        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
//            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
//        }
//    }
//}

repositories {
    mavenLocal()
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'
    implementation fg.deobf('curse.maven:framework-549225:4718247')
    implementation fg.deobf('curse.maven:configured-457570:4011355')
    implementation fg.deobf('curse.maven:catalogue-459701:4171024')
    implementation fg.deobf('curse.maven:backpacked-352835:3923045')
    compileOnly fg.deobf('curse.maven:controllable-317269:3936915')
    compileOnly fg.deobf("mezz.jei:jei-1.19.2-common-api:11.4.0.274")
    compileOnly fg.deobf("mezz.jei:jei-1.19.2-forge-api:11.4.0.274")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19.2-forge:11.4.0.274")
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "Gun Mod",
            "Specification-Vendor": "MrCrayfish",
            "Specification-Version": "1",
            "Implementation-Title": "Gun Mod",
            "Implementation-Version": project.version,
            "Implementation-Vendor" : "MrCrayfish",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "cgm.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///X:/localmaven/mcmods"
        }
    }
}
